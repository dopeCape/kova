name: Release Kova CLI

on:
  push:
    branches: [ main ]  # Triggers on: pushes to main OR merged PRs
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.2.3) - leave empty to auto-increment'
        required: false
        type: string
      increment:
        description: 'Auto-increment type'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Determine version to release
  determine-version:
    name: Determine Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all tags

    - name: Determine version
      id: version
      run: |
        if [ -n "${{ github.event.inputs.version }}" ]; then
          # Manual version specified
          VERSION=${{ github.event.inputs.version }}
          # Add 'v' prefix if not present
          if [[ ! $VERSION =~ ^v ]]; then
            VERSION="v${VERSION}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${VERSION}" >> $GITHUB_OUTPUT
          echo "📝 Using manual version: ${VERSION}"
        else
          # Auto-increment from latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "🔍 Latest tag: ${LATEST_TAG}"
          
          # Parse semantic version
          if [[ $LATEST_TAG =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            PATCH=${BASH_REMATCH[3]}
            
            INCREMENT="${{ github.event.inputs.increment }}"
            if [ -z "$INCREMENT" ]; then
              INCREMENT="patch"  # Default for main branch pushes
            fi
            
            case "$INCREMENT" in
              major)
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              minor)
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              patch|*)
                PATCH=$((PATCH + 1))
                ;;
            esac
            
            NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          else
            NEW_VERSION="v0.1.0"
          fi
          
          echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "🚀 Auto-incremented to: ${NEW_VERSION} (${INCREMENT:-patch} increment)"
        fi

  # Build CLI binaries for Unix platforms only
  build-cli:
    name: Build CLI
    needs: determine-version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            goos: linux
            goarch: amd64
          - os: linux
            arch: arm64
            goos: linux
            goarch: arm64
          - os: darwin
            arch: amd64
            goos: darwin
            goarch: amd64
          - os: darwin
            arch: arm64
            goos: darwin
            goarch: arm64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Build CLI
      working-directory: apps/core
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        VERSION=${{ needs.determine-version.outputs.version }}
        BINARY_NAME="kova-${{ matrix.os }}-${{ matrix.arch }}"
        
        echo "🔨 Building ${BINARY_NAME} for ${VERSION}"
        
        go build \
          -ldflags="-X main.version=${VERSION} -X main.commit=${GITHUB_SHA:0:7} -X main.date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
          -o "${BINARY_NAME}" \
          cmd/cli/main.go
        
        # Create compressed archive
        tar -czf "${BINARY_NAME}.tar.gz" "${BINARY_NAME}"
        
        # Generate checksum
        sha256sum "${BINARY_NAME}.tar.gz" > "${BINARY_NAME}.tar.gz.sha256"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kova-cli-${{ matrix.os }}-${{ matrix.arch }}
        path: |
          apps/core/kova-*
          apps/core/*.tar.gz
          apps/core/*.sha256

  # Create GitHub release with all binaries
  release:
    name: Create Release
    needs: [determine-version, build-cli]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        
        # Move all binaries and archives to release directory
        find . -name "kova-*" -type f | while read file; do
          cp "$file" release-assets/
        done
        
        # Create combined checksums file
        cd release-assets
        sha256sum *.tar.gz > checksums.txt
        ls -la

    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION=${{ needs.determine-version.outputs.version }}
        TAG=${{ needs.determine-version.outputs.tag }}
        
        # Create release notes
        cat > release_notes.md << EOF
        # Kova ${VERSION}
        
        ## 🚀 Installation
        
        ### Quick Install (Recommended):
        \`\`\`bash
        curl -fsSL https://get.kova.io/install.sh | bash
        \`\`\`
        
        ### Manual Install:
        Download the appropriate binary for your platform and run:
        \`\`\`bash
        # Linux AMD64
        curl -L https://github.com/${{ github.repository }}/releases/download/${VERSION}/kova-linux-amd64.tar.gz | tar -xz
        sudo ./kova-linux-amd64
        
        # Linux ARM64
        curl -L https://github.com/${{ github.repository }}/releases/download/${VERSION}/kova-linux-arm64.tar.gz | tar -xz
        sudo ./kova-linux-arm64
        
        # macOS Intel
        curl -L https://github.com/${{ github.repository }}/releases/download/${VERSION}/kova-darwin-amd64.tar.gz | tar -xz
        sudo ./kova-darwin-amd64
        
        # macOS Apple Silicon
        curl -L https://github.com/${{ github.repository }}/releases/download/${VERSION}/kova-darwin-arm64.tar.gz | tar -xz
        sudo ./kova-darwin-arm64
        \`\`\`
        
        ## 🔧 Supported Platforms
        - ✅ Linux (AMD64, ARM64)  
        - ✅ macOS (Intel, Apple Silicon)
        - ❌ Windows (not supported)
        
        ## 🔒 Verification
        Verify downloads using checksums:
        \`\`\`bash
        curl -L https://github.com/${{ github.repository }}/releases/download/${VERSION}/checksums.txt
        sha256sum -c checksums.txt
        \`\`\`
        
        ## 📋 What's New
        - Interactive TUI installer
        - Docker-based deployment with Traefik
        - Automatic HTTPS with Let's Encrypt
        - Multi-architecture Docker images
        - Comprehensive health monitoring
        EOF
        
        # Check if tag already exists
        if git rev-parse "${TAG}" >/dev/null 2>&1; then
          echo "⚠️ Tag ${TAG} already exists. Skipping release creation."
          echo "If you want to recreate this release, delete the tag first:"
          echo "  git tag -d ${TAG}"
          echo "  git push origin :refs/tags/${TAG}"
          exit 0
        fi
        
        # Create tag and release
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Create and push tag
        git tag "${TAG}"
        git push origin "${TAG}"
        
        # Create release
        gh release create "${TAG}" \
          --title "Kova ${VERSION}" \
          --notes-file release_notes.md \
          --draft=false \
          --prerelease=false \
          release-assets/*

  # Generate install script
  generate-installer:
    name: Generate Install Script
    needs: [determine-version, release]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate install script
      run: |
        VERSION=${{ needs.determine-version.outputs.version }}
        
        cat > install.sh << 'EOF'
        #!/bin/bash
        # Kova One-Line Installer
        # Usage: curl -fsSL https://get.kova.io/install.sh | bash
        
        set -e
        
        # Colors
        RED='\033[0;31m'
        GREEN='\033[0;32m'
        BLUE='\033[0;34m'
        YELLOW='\033[1;33m'
        NC='\033[0m'
        
        # Configuration
        REPO="${{ github.repository }}"
        VERSION="VERSION_PLACEHOLDER"
        
        echo -e "${BLUE}🚀 Kova Installer ${VERSION}${NC}"
        echo -e "${BLUE}================================${NC}"
        
        # Detect OS and architecture
        OS=$(uname -s | tr '[:upper:]' '[:lower:]')
        ARCH=$(uname -m)
        
        case $ARCH in
            x86_64|amd64) ARCH="amd64" ;;
            aarch64|arm64) ARCH="arm64" ;;
            *) 
                echo -e "${RED}❌ Unsupported architecture: $ARCH${NC}"
                echo -e "${YELLOW}Supported: amd64, arm64${NC}"
                exit 1 
                ;;
        esac
        
        case $OS in
            linux|darwin) ;;
            *) 
                echo -e "${RED}❌ Unsupported OS: $OS${NC}"
                echo -e "${YELLOW}Supported: Linux, macOS${NC}"
                echo -e "${YELLOW}Windows is not supported${NC}"
                exit 1 
                ;;
        esac
        
        echo -e "${GREEN}✅ Detected platform: ${OS}/${ARCH}${NC}"
        
        # Check for root privileges
        if [ "$EUID" -ne 0 ]; then
            echo -e "${RED}❌ This installer requires root privileges${NC}"
            echo -e "${YELLOW}Please run: sudo $0${NC}"
            exit 1
        fi
        
        # Download and extract
        BINARY="kova-${OS}-${ARCH}"
        URL="https://github.com/${REPO}/releases/download/${VERSION}/${BINARY}.tar.gz"
        
        echo -e "${BLUE}📥 Downloading ${BINARY}...${NC}"
        
        if ! curl -fsSL "${URL}" | tar -xz; then
            echo -e "${RED}❌ Failed to download or extract ${BINARY}${NC}"
            echo -e "${YELLOW}Please check your internet connection and try again${NC}"
            exit 1
        fi
        
        chmod +x "${BINARY}"
        
        # Verify download
        if [ ! -f "${BINARY}" ]; then
            echo -e "${RED}❌ Binary not found after extraction${NC}"
            exit 1
        fi
        
        # Run installer
        echo -e "${GREEN}✅ Download complete. Starting Kova installation...${NC}"
        echo -e "${BLUE}================================${NC}"
        
        "./${BINARY}"
        
        # Cleanup
        rm -f "${BINARY}"
        
        echo -e "${GREEN}🎉 Kova installation script completed!${NC}"
        EOF
        
        # Replace version placeholder
        sed -i "s/VERSION_PLACEHOLDER/${VERSION}/g" install.sh
        
    - name: Upload install script
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION=${{ needs.determine-version.outputs.version }}
        gh release upload "${VERSION}" install.sh
